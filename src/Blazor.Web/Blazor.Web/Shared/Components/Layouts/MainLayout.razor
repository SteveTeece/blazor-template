@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@*@inject AppState appState*@

<MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="@bbDrawerClass">
    <MatDrawer @bind-Opened="@_navMenuOpened">
        @*<header class="drawer-header">
            <div class="drawer-logo">
                <img alt="Blazor Boilerplate" class="logo-img" src="_content/BlazorBoilerplate.CommonUI/images/blazorboilerplate-dark.svg" title="Blazor Boilerplate">
                <a class="miniHover" href="/">Blazor Boilerplate</a>
            </div>
            <UserProfile />
        </header>*@
        <NavMenu />
        @*<footer class="drawer-footer">
            <MatTooltip Tooltip="Help">
                <MatButton Icon="help" RefBack="@context" Link="https://github.com/enkodellc/blazorboilerplate"><span class="miniHover">Help & Support</span></MatButton>
            </MatTooltip>
        </footer>*@
    </MatDrawer>
    <MatDrawerContent>
        <MatAppBarContainer>
            <MatAppBar Fixed="true">
                <MatAppBarRow>
                    <MatAppBarSection>
                        <MatAppBarTitle>

                        </MatAppBarTitle>
                        <div class="hidden-mdc-down">
                            <MatTooltip Tooltip="Toggle Navigation">
                                <MatIconButton Class="navToggle" Icon="menu" ToggleIcon="menu" OnClick="@((e) => NavToggle())" RefBack="@context"></MatIconButton>
                            </MatTooltip>
                        </div>
                    </MatAppBarSection>
                    <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                        <Login></Login>
                    </MatAppBarSection>
                </MatAppBarRow>
            </MatAppBar>
            <MatAppBarContent>
                @*<Breadcrumbs RootLinkTitle="Home"></Breadcrumbs>*@
                <section class="container-fluid">
                    @Body
                </section>
            </MatAppBarContent>
        </MatAppBarContainer>
    </MatDrawerContent>
</MatDrawerContainer>

@code {
    bool _navMenuOpened = false;
    public string bbDrawerClass = "";


    private void CallLogin()
    {
        var returnUrl =
              navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.NavigateTo($"/account/Login/{returnUrl}", forceLoad: false);
    }
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Uncomment to secure entire app  with no anonymous user access
        //navigationManager.NavigateTo("/account/login");

        // Set Default landing page if you want for anonymous user.
        // Authenticated users are redirected after successful login.
        //navigationManager.NavigateTo("/");

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            //var profile = await appState.GetUserProfile();
            //_navMenuOpened = profile.IsNavOpen;
            //_navMinified = profile.IsNavMinified;
        }
    }

    void NavToggle()
    {
        _navMenuOpened = !_navMenuOpened;
        if (_navMenuOpened)
        {
            bbDrawerClass = "full";
        }
        else
        {
            bbDrawerClass = "closed";
        }

        this.StateHasChanged();
    }

    void NavLock()
    {
        //Todo Lock Nav
    }

    
}