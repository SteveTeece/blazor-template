@page "/login"
@page "/login/{returnurl}"

@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@*@inject IMatToaster matToaster*@
@*@inject AppState appState*@
@inject NavigationManager NavigationManager
@*@inject IJSRuntime js*@

@using static Microsoft.AspNetCore.Http.StatusCodes


<MatCard>
    <EditForm Model="@loginParameters" OnValidSubmit="@SubmitLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField id="userName" @bind-Value="@loginParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true" tabindex="1"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@loginParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password" tabindex="2"></MatTextField>
            </div>
            <div class="form-group">
                <MatButton class="float-right" Type="submit" Raised="true" tabindex="3">Login</MatButton>
                @*<MatCheckbox @bind-Value="@loginParameters.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>*@
            </div>
        </fieldset>
    </EditForm>
</MatCard>

@code {

    public class LoginDto
    {
        public string RememberMe { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    public class ForgotPasswordDto
    {
        public string Email { get; set; }
    }

    string navigateTo = "";
    bool forgotPasswordToggle = false;
    LoginDto loginParameters { get; set; } = new LoginDto();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();

    [Parameter]
    public string ReturnUrl { get; set; }

    private void GoBack()
    {
        if (string.IsNullOrEmpty(ReturnUrl))
            ReturnUrl = "";
        NavigationManager.NavigateTo(ReturnUrl, forceLoad: false);
    }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo(navigationManager.BaseUri + navigateTo, forceLoad: true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //    await js.InvokeVoidAsync("SetFocus", "userName");

        //await base.OnAfterRenderAsync(firstRender);
    }

    void GoogleSignIn()
    {
        navigationManager.NavigateTo(navigationManager.BaseUri + "api/externalauth/challenge/google", true);
    }

    void Register()
    {
        navigationManager.NavigateTo("/account/register");
    }

    async Task SubmitLogin()
    {
        //try
        //{
        //    var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Login(loginParameters);
        //    if (response.StatusCode == Status200OK)
        //    {
        //        // On successful Login the response.Message is the Last Page Visited from User Profile
        //        // We can't navigate yet as the setup is proceeding asynchronously
        //        if (!string.IsNullOrEmpty(response.Message))
        //        {
        //            navigateTo = response.Message;
        //        }
        //        else
        //        {
        //            navigateTo = "/dashboard";
        //        }
        //    }
        //    else
        //    {
        //        matToaster.Add(response.Message, MatToastType.Danger, "Login Attempt Failed");
        //    }
        //}
        //catch (Exception ex)
        //{
        //    matToaster.Add(ex.Message, MatToastType.Danger, "Login Attempt Failed");
        //}
    }

    async Task ForgotPassword()
    {
        //try
        //{
        //    await ((IdentityAuthenticationStateProvider)authStateProvider).ForgotPassword(forgotPasswordParameters);
        //    matToaster.Add("Forgot Password Email Sent", MatToastType.Success);
        //    forgotPasswordParameters.Email = "";
        //    forgotPasswordToggle = false;
        //}
        //catch (Exception ex)
        //{
        //    matToaster.Add(ex.Message, MatToastType.Danger, "Reset Password Attempt Failed");
        //}
    }
}